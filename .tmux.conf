# Options {{{1
# Notes and Todos {{{2
# Some notes on the usage of the "set" command and its usage here
# NOTE 1: the set-options command (alias: set) has several forms, depending on
# the type of option. The types of options are:
#
# 1. Server options. These are settings that apply to the general operation of
#    tmux, not to anything that happens in a specific session.
#    They are set using the command "set -s".
# 2. Session options. These are settings that apply to the functioning of a
#    single session, but which could in principle vary between sessions. They
#    are set using the command "set."
# 3. Window options. These are options that apply to the functioning of a single
#    window. They are set using the command "set -w" (I believe "setw" is an
#    alias for this, but I couldn't find it in the documentation).
# 4. Pane options. These are options that apply to the functioning of a single
#    pane. They are set using the command "set -p".
#
# NOTE 2: tmux recognizes these 4 types of options internally just based on
# what they apply to, not based on their signifiance. For instance, base-index
# (which determines how windows are numbered) is a session option, because each
# session needs to know how to number its windows, wherease pane-base-index is
# a window option, because each window needs to know how to number its panes.
# Also, tmux often correctly infers the type of the option even without "-s/w/p"
# being used correctly, so that one can get away with using "set" for a window
# option or even "set -w" for a session option.
#
# I think these factors make it so that thinking about options based on their
# type is not particularly helpful. I have tried to use the correct commands
# for each type of option below, just for the sake of clarity; however,
# I've grouped options thematically instead of by type, because this
# seems to be a more helpful ordering when one is reading through a dotfile
# like this one.
#
# NOTE 3: session, window, and pane options can all be given defaults that any
# new session, window, or pane will inherit. For session and window options,
# these defaults are called "global" options and are set using the "-g" flag of
# the "set" command. For instance, running "set -w pane-base-index 5" in the
# tmux command prompt will set the index of the first pane in the current window
# to 5. By contrast, running "set -wg pane-base-index 5" will make it so that
# every new window that is created will have the index of the first pane be 5.
# For pane options, the way to create a default is to set a pane option using
# the "-w" flag: then, it will apply to all panes within the window to which the
# set applies. In particular, setting a pane option using "set -wg" will apply
# the option to all panes by default.
#
# Since .tmux.conf is sourced when the tmux server starts, all session,
# window, and pane options here will generally be set in these ways, to provide
# defaults for any sessions, windows, and panes that will be created on the
# server. If we ever want to overrule these defaults for a specific session,
# window, or pane, all we have to do is set the option in that specific case.
# For instance, if we have "set -wg pane-base-index 1" in .tmux.conf, then
# panes will be numbered starting with 1 by default; however, if we ever
# run "set -w pane-base-index 0" in a specific window, then panes will be
# numbered starting with 0 in that particular window.



# NOTE/TODO: here are some session options that probably have good defaults,
#input  but if tey didn't, we might want to set them:
#
# assume-paste-time
# display-panes-time
# display-time
# repeat-time
# status
# status-interval
# default-command
# default shell
#
# Similarly, here are some window and pane options that look like they could be
# useful, but I don't think we need them currently:
#
# aggressive-resize (I'm told this helps with viewing the same session on 
#                    multiple screens of different resolutions)
# alternate-screen
# remain-on-exit



# TODO: Do we want persistent sessions for tmux? If so, it looks like
# the main plugin is tmux-ressurect (or tmux-continuum, which depends on
# tmux-ressurect but also adds in some other convenient features).
# }}}

# TODO: This probably goes somewhere else, once we have a more unified
# copy-paste solution across zsh and tmux.
# Define an environment variable that contains our system clipboard command.
# This will be useful below, so that we can bind both "y" and a mouse click
# to copy to the system clipboard when in copy mode.
TMUX_SYSTEM_CLIPBOARD_COMMAND='xclip -in -selection clipboard'

# General {{{2
# Set the default value for the $TERM environment variable, which tells tmux
# (and other terminal applications) certain information about the terminal.
#
# NOTE: The value of $TERM given here must be the name of a terminfo database
# installed on the system, and for tmux to work properly, we must use some
# derivative of the tmux or screen databases. Standard values are tmux-256color
# and screen-256color. Even though we're using tmux instead of GNU screen (which
# is another terminal multiplexer), we use screen-256color because it's a
# more widely available terminfo database.
set -s default-terminal "screen-256color"

# Number window and pane by starting at 1 (instead of 0, which is the default).
set -g base-index 1
set -wg pane-base-index 1

# When a window is killed, automatically renumber the other windows accordingly.
set -g renumber-windows on
# }}}
# History {{{2
# Set the number of lines to hold in the history of each window. (This is
# actually a session option, which is applied to each window in the session.)
# We set the number to be quite high, so that we can scroll back very far
# if needed.
set -g history-limit 50000

# (DEFAULT) Store up to 50 copy/paste buffers and 100 messages generated by
# the show-messages command.
set -s buffer-limit 50
set -s message-limit 100

# TODO: The options below are supposed to save command prompt history to the
# file ~/.tmux_history, and limit this history to 10,000 items. But for some
# reason they don't seem to be working for me (I am using version 2.8, and
# the history limit isn't recognized as an option, and the history file just
# doesn't do anything). Yet somehow, I do have command prompt history that
# persists between tmux sessions. . .
# See if this works in a future installation. If so, do we want it? Or should
# we just keep the default behavior, since that seems to be working just fine
# (other than the fact that I have no idea where the history is being stored).
# set -s history-file "${HOME}/.tmux_history"
# set -s prompt-history-limit 10000
# }}}
# Monitoring and alerts {{{2
# Don't trigger an alert when there's activity in a window. Such alerts don't
# seem useful for me: I don't usually have spontaneous activity in windows I'm
# not in, and if I start some activity in one window and then move to
# another window, I don't need an alert about the activity I just started.
set -wg monitor-activity off
# Don't monitor for inactivity in windows. Again, this doesn't seem useful for
# my purposes.
set -wg monitor-silence 0
# Give a visual alert whenever a bell is triggered in an inactive window
# (in addition to the bell, which will ring if the shell is configured
# to make a sound). This is useful because we can set some long command to
# run and then make a bell afterwards, e.g. with "[command]; echo -e '\a'"
# (explanation: the '\a' is an escape sequence for a bell, and the -e option
# tells echo to parse backslashes as escape sequences). Then, we can swap to a
# new window, and when [command] finishes, we'll get a bell and a visual alert.
set -wg monitor-bell on
set -g bell-action other
set -g visual-bell both
# }}}
# Vim-like Behavior {{{2
# Use vi-like navigation on the tmux command prompt. These navigations commands
# don't seem that great: they aren't quite the same as vi commands, and as far
# as I know, there's no way to get to normal mode other than actually using the
# escape key. However, the alternative is emacs-style hotkeys, which might
# actually be better in this case, except that I have no idea what any of them
# are! So, unless I end up learning emacs hotkeys at some point, I figure I may
# as well take my chances with the vi-like commands.
set -g status-keys vi

# Use vi-like keys for navigation in copy mode. Unlike with status-keys above,
# the vi-like navigation for copy mode is actually quite good!
set -wg mode-keys vi

# Sets the command tmux uses when it opens an editor. In this case, that
# command is nvim. As far as I can tell, this only impacts the choose-buffer
# command: when selecting between the different buffers to paste,
# hitting the "e" key instead of <Enter> will put the buffer in an editor.
# TODO: this doesn't seem to exist on my current version of tmux (2.8);
# I think it's only for newer versions. Check if it really works in the
# choose-buffer command. If so, do we really want/need it? We already set
# EDITOR and VISUAL to nvim in .zshrc; maybe this is enough. . .
#set -s editor "/usr/bin/nvim"

# Send an escape to programs in the shell 10ms after ESC is pressed.
# The default is 500ms, which causes a noticeable delay any time we need to
# press ESC (e.g. in programs that have vim-like inputs but don't have a way
# to map jk to ESC). Many people set this to 0ms; however, I've heard this
# can sometimes cause key-bindings with the "meta" (i.e. alt) key to not fire.
# It seems that 10-20ms is recommended to avoid this potential issue (or
# sometimes even higher, e.g. 100ms or 1000ms, for SSH sessions on networks
# with more latency).
#
# NOTE: The technical reason this setting exists at all is that most
# terminal applications expect characters as inputs. This means that "function"
# keys (e.g. the "up arrow" key, the "alt" key, etc.) have to be encoded into
# characters; for historical reasons, these encodings start with an escape.
# So, when tmux receives an escape, it has to determine whether this escape is
# the first in a series of characters that mean "this is an alt/up arrow/other
# function key" or whether it is just the ESC key being pressed. (Tmux needs to
# know this so it can trigger things like key-bindings based on these "function
# key" presses.) To do this, tmux waits a certain number of milliseconds to see
# if it receives input after the escape that signifies a function key; if not,
# then the escape is interpreted as just being as escape. The number of
# milliseconds before this timeout is determined by the escape-time option.
#
# As a concrete example of this behavior, note that the "up arrow" key is
# typically encoded as <ESC>[A (an escape, then an open bracket, then a capital
# "A"). Set escape-time to the default 500 (or higher), then press these
# three keys in quick succession; you should see the shell scroll back to
# the previous entry in history, since this is usually what the "up arrow" key
# does. Setting escape-time very small, like we do here, will prevent these
# three keys in sequence from presenting as an "up arrow" (unless you can type
# them within 10ms, that is). 
set -s escape-time 10
# }}}
# Currently Unused {{{2
# NOTE: Tmux starts login shells by default, which can cause certain issues
# (mainly with login scripts being run every time a new tmux window/pane is
# created). The upside to this is that these shells will outlive the current
# OS login session (which normally has an underlying login shell that owns
# all non-login shells in that session). For instance, one can start a
# tmux session, detach and log out of the computer, and then log back in again
# later and reattach. 
#
# For now, I'll stick with the default. If we ever want to change this,
# though, the following line tells tmux to use non-login shells instead.
# set -g default-command "${SHELL}"

# NOTE: Typically, tmux will automatically detect the correct type of shell
# to use by checking the SHELL environment variable, which should be set to
# zsh if we've made zsh our default shell. But if tmux isn't running zsh for
# some reason, the following line explicitly tells it to do so.
#set -g default-shell "/bin/zsh"

# NOTE: If we ever encounter issues where vim is not receiving (or is doing
# weird things upon receiving) arrow keys, function keys, PageUp/PageDown, etc.,
# then the following option is a commonly known fix. It tells tmux to send
# xterm-style sequences for these keys. Then, one has to (manually, in the
# .vimrc file) tell vim which keys these xterm-style sequences map to.
# I'm told the underlying issue is that vim knows about these sequences when
# $TERM is xterm or xterm-256, but tmux needs to set $TERM to something like
# screen-256color (see our comments on the default-terminal option above),
# so vim gets confused.
#
# For more information on what needs to go in the .vimrc, see this helpful link:
# https://stackoverflow.com/a/15471820
# For the tmux side of things, the following option is all we need.
#
# It's worth noting that I couldn't find any threads online about this ever
# being an issue for neovim (in fact, all the threads about it are from 2015 or
# earlier, although I did run into this issue myself on my first arch linux VM,
# which was around 2019 or 2020). So it's possible that something in tmux and/or
# vim and/or neovim has changed to make this no longer an issue.
# set -gw xterm-keys on
#}}}
#}}}
# Appearance {{{
# NOTE: The colors used in this section are picked with the assumption
# that base16 is installed an in use for our shell. In particular, we make
# use of color18 and color19, which are typically shades of gray set by
# base16 color schemes. (Actually, they appear as colour18 and colour19
# below, since apparently tmux uses British spellings.)
#
# Our use of the colors in the base16 color scheme is relatively
# straightforward. In particular, if you just swap out "colour#"
# with some other "colour#" everywhere in this section, you can easily
# change the color scheme without figuring out what every little option
# does. Note that the base16 color scheme lives in colors 0 through 21
# (inclusive), and most external programs will only use colors 0 through
# 15 (inclusive). So, sticking to only these colors means that our color
# scheme will automatically be synchronized with everything else in the
# shell, which will all be controlled by our base16 color scheme.
#
# For reference, here is a list of how we've used each color below.
#
# blue (colour4): used as the main color.
# purple (colour5): used as an accent color for current state.
# green (colour2): used as an accent color for new information.
# 
# dark gray (colour18): used as a neutral color, and as a text color
#                       on bright backgrounds.
# light gray (colour19): used as an accent where colour18 is used.
# black (colour0): used as a background/default color.
# white (colour7): used as a text color for dark backgrounds.

# Names and Titles {{{
# NOTE: In tmux, windows and sessions have names, but panes have "titles."
# None of these is to be confused with the title of the terminal window, which
# is the text displayed on the top bar of the window. Pane titles are not
# displayed anywhere by default, and they are not the same as the
# pane-border-format option we set below. So we don't actually use pane
# titles anywhere in our configuration.

# Automatically set the title of the terminal window to be:
# "tmux session: {session name} ({hostname})
# There are more succinct versions of this information on the status line.
# However, I don't really look at window titles to gather a wealth
# of information; I just want them to be easy to read and to tell me what
# we're doing, in case I've forgotten what this window is altogether.
# I think this window title accomplishes that.
set -g set-titles on
set -g set-titles-string "tmux session: #S (#h)"

# Automatically set the name of unnamed tmux windows to be: 
# .../{current working directory of active pane}
# This makes a short and serviceable name for any windows that aren't
# given a more informative name. 
# NOTE: any user-supplied window name will override this automatic naming.
set -wg automatic-rename on
set -wg automatic-rename-format ".../#{b:pane_current_path}"
# The following pane option allows programs in a pane to change the window name
# using a certain terminal escape sequence. Currently, we have no use for this,
# so we turn it off.
set -wg allow-rename off

# At the top of each pane, on the border, display the following:
# {Window number}.{pane number} {command currently running in pane}
set -wg pane-border-status top
set -wg pane-border-format "#I.#P #{pane_current_command}"
#}}}
# Status Bar {{{
# NOTE: By default, the status bar displays info set by
# status-left on the far left, info set by status-right on the
# far right, and a list of windows in between. This display format
# can be changed with the status-format option; however, we will
# just use the default format.

# Turn the status line on (and make it only one row tall).
set -g status on
# Put the status line at the bottom of the window.
set -g status-position bottom
# Refresh the status line every 5 seconds.
set -g status-interval 5

# Format the left side of the status line to have a blue background with
# dark gray text and display:
# {username}@{host name} [{session name}]
set -g status-left-style fg=colour18,bg=colour4
set -g status-left "#(whoami)@#h [#S]"
# Set the left side of the status line to be cut off after 50 characters.
set -g status-left-length 50

# Format the left side of the status line to have a blue background with
# dark gray text and display:
# {day of week}, {date} {24-hour time}
set -g status-right-style fg=colour18,bg=colour4
set -g status-right "%a, %b %d %R"
# Set the right side of the status line to be cut off after 25 characters.
# (This should be longer than our date format ever gets.)
set -g status-right-length 25

# Display windows in the center of the space between status-left and
# status-right.
set -g status-justify centre
# Make the background black for the space where the windows will appear.
set -g status-style bg=colour0

# Give windows a dark background with white text on the status line.
set -wg window-status-style fg=colour7,bg=colour18
# Give the last viewed window a slightly lighter background and slightly
# lighter text than the other windows.
set -wg window-status-last-style fg=colour15,bg=colour19
# Give the currently viewed window a purple background with dark text.
set -wg window-status-current-style fg=colour18,bg=colour5
# Give windows that have been bell alerts (from the monitor-bell option) a
# green background with dark text, to highlight them (but not in the same
# color that status-left status-right have for highlighting, which is blue).
# NOTE: there is also a window-status-activity-style for when the
# monitor-activity is in use. However, we are not using that option.
set -wg window-status-bell-style fg=colour19,bg=colour2

# Display the following info on the status line for each window:
# ({window flags, if there are any}) {window number}: {window name}
set -wg window-status-format "#{?#F,(#F),""} #I: #W "
# Display the same info for the current window as for all other windows.
# The only difference is, we will never have a case of no flags to display,
# since the current window always has the "*" flag.
set -wg window-status-current-format "(#F) #I: #W "

# Don't put any separation between windows on the status line. Instead,
# we put our separator (which is a single space) at the end of
# window-status-format and window-status-current-format above.
# This way, the separator takes on the colors of the window styles instead
# of the background color of the status line (which we set to black using
# status-style above).
set -wg window-status-separator ""
#}}}
# Panes, Messages, and Copy Mode {{{
# Display a single, solid line as a border between panes.
# NOTE: This is a new option as of tmux version 2.9. I am currently using
# version 2.8, so I commented out this option.
#set -wg pane-border-lines single
# Inactive panes have a gray border. 
set -g pane-border-style fg=colour19
# The active pane has a blue border.
set -wg pane-active-border-style fg=colour4
# Set the background of inactive panes to be the default color
# (which is typically a transparent black).
set -wg window-style bg=default
# Set the bacground of the active pane to black.
set -wg window-active-style bg=colour0

# Make the command prompt (and messages that display on it)
# light gray with a white background.
set -g message-style fg=colour7,bg=colour19
# When we go into command mode (with the status-keys vi option)
# on the command prompt, create a line underneath where all the
# text goes. This is a clear visual cue for command mode (i.e.
# normal mode) vs. insert mode, but it isn't as distracting as
# changing the colors of anything.
set -g message-command-style fg=colour7,bg=colour19,underscore

# Set copy mode highlighting to be light gray (the same as the
# command prompt color).
set -wg mode-style bg=colour19
# TODO: The below options don't seem to be supported by the version
# of tmux that I'm currently using (2.8). Once I get a newer version, use
# these to add a little more color to copy mode searches.
#set -wg copy-mode-match-style colour2
#set -wg copy-mode-current-match-style colour5
#set -wg copy-mode-mark-style colour1
#}}}
# Other Commands {{{
# When using the display-panes command (<prefix> q), color
# the active pane number blue and the inactive pane numbers
# a light gray. This mirrors our coloring of pane borders
# with pane-border-style and pane-border-active-style above,
# except that we use a lighter gray here, because it stands
# out a little better (which seems useful for this situation,
# but less useful for inactive pane borders).
set -g display-panes-active-colour colour4
set -g display-panes-colour colour20

# Set the clock in clock mode (<prefix> t) to be in 12-hour mode
# and colored green. I don't imagine ever using this mode, so I figure
# we may as well make it (1) different than the 24-hour clock on the
# status bar in case that's useful and (2) a fun color for a change
# of pace.
set -wg clock-mode-style 12
set -wg clock-mode-colour colour2
#}}}
# Old Settings (Inspired by tmuxline) {{{
# Below are some old settings. I hacked these together using a combination
# of a snapshot from tmuxline and a tmux plugin for base16 found here:
#
# https://github.com/mshkrebtan/base16-tmux/blob/master/tmuxcolors-base16.conf
#
# I think the new settings above are simpler and clearer.
# However, I'm keeping this around because it contains some cool formatting
# features of tmuxline (specficially, the "segmenting" of status-left and
# status-right into 3 pieces using different background colors, and the use
# of a right arrow in the powerline font). TODO: Maybe we can use those
# cool features in our settings above as well?

#set -g status-left "#[fg=colour18,bg=colour4,bold] #S #[fg=colour4,bg=colour19,nobold,nounderscore,noitalics]#[fg=colour7,bg=colour19] #F #[fg=colour19,bg=colour18,nobold,nounderscore,noitalics]#[fg=colour7,bg=colour18] #W #[fg=colour18,bg=colour18,nobold,nounderscore,noitalics]"

#set -g status-right "#[fg=colour18,bg=colour18,nobold,nounderscore,noitalics]#[fg=colour7,bg=colour18] %a #[fg=colour19,bg=colour18,nobold,nounderscore,noitalics]#[fg=colour7,bg=colour19] %b %d  %R #[fg=colour4,bg=colour19,nobold,nounderscore,noitalics]#[fg=colour18,bg=colour4] #h "

#setw -g window-status-format "#[fg=colour18,bg=colour18,nobold,nounderscore,noitalics]#[default] #I  #W #[fg=colour18,bg=colour18,nobold,nounderscore,noitalics]"

#setw -g window-status-current-format "#[fg=colour18,bg=colour19,nobold,nounderscore,noitalics]#[fg=colour7,bg=colour19] #I  #W #[fg=colour19,bg=colour18,nobold,nounderscore,noitalics]"
#}}}
#}}}
# Key Bindings {{{
# NOTE: the "bind" command (which we have used throughout here) is just an
# abbreviated form of the "bind-key" command (which one often finds in other
# examples of .tmux.conf files).  
# NOTE: By default, all bindings require the prefix (which we set to
# Ctrl+a below) at the beginning. So for instance, "bind t [command]" would
# execute [command] after hitting Ctrl+a and then t. Using "bind -n" makes it so
# that the prefix is not needed (which is not a good idea unless you're sure
# that the binding won't conflict with anything else you want those keys to do).
#
# NOTE: For a nice rundown of default commands and bindings for tmux, see the
# gist located at: https://gist.github.com/MohamedAlaa/2961058

# General {{{
# Set Ctrl+a to be the prefix. This is more convenient than Ctrl+b (especially
# if caps lock is mapped to control!)
set -g prefix C-a
# This binding causes C-a C-a to send Ctrl+a to the shell (whereas a single
# C-a is now captured by tmux as the key binding prefix and so is not sent
# to the shell).
bind C-a send-prefix
# By default, <prefix> C-b sends the prefix to the shell. Since we now have
# <prefix> C-a for that (which makes more sense when the prefix is C-a),
# we can unbind C-b.
# NOTE: Technically this unbinding is unnecessary, because we bind C-b to
# something else in the "Copying and Pasting" section below. But I decided
# to leave this in anyway, just in case that binding changes in the future.
unbind C-b

# Use <prefix> R to quickly reload tmux settings. (We reserve <prefix> r
# for a binding to rename windows; see the "Windows" section below.)
bind R source-file ~/.tmux.conf \; display 'Reloaded tmux config'
#}}}
# Panes {{{
# Split panes using \ (or |) and - (or _) instead of the built-in " and %.
# These keys are more visual and easier to remember.
bind \ split-window -h
bind | split-window -h
bind - split-window -v
bind _ split-window -v

# Move between panes using h/j/k/l, just like Ctrl+w h/j/k/l in vim.
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Similarly, resize panes using H/J/K/L.
# NOTE: the -r option specifies that the binding can be repeated without
# hitting the prefix key again, provided it's done quickly enough (the time
# window is set by the repeat-time option, which defaults to 500ms). In other
# words, hitting <prefix> HH should expand the current pane to the left twice.
bind -r J resize-pane -D 3
bind -r K resize-pane -U 3
bind -r H resize-pane -L 3
bind -r L resize-pane -R 3

# Cycle through panes in order using "," and ".".
# NOTE: Another useful keybinding like this is q, which by default lets you
# jump to a pane by typing its number.
bind -r , select-pane -t :.-
bind -r . select-pane -t :.+
#}}}
# Windows {{{
# Create a new window and prompt for its name with Ctrl+c. Note that c on its
# own creates a new window without prompting for its name.
bind C-c command-prompt -p "Name of new window: " "new-window -n '%%'"

# Rename the current window using r. By default, this is bound to ","
# (which conflicts with our bindings to cycle panes above), and it fills in the
# current window name (which seems unhelpful, since we probably want to name it
# something different than the current name).
bind r command-prompt -p "New name for current window: " "rename-window '%%'"

# Cycle through windows in order with n and p. This is the same as the
# default binding, except that the default binding doesn't have the -r option.
# NOTE: Another useful keybinding like this is [number], which by default lets
# you jump to window [number]. For instance, <prefix> 1 jumps to window 1.
bind -r n next-window
bind -r p previous-window

# By default, <prefix> x kills the current pane. Analogously, we define
# <prefix> X to kill the current window. We also unbind &, which is the default
# binding for killing the window.
unbind &
bind X confirm-before -p "kill-window #I? (y/n)" kill-window
#}}}
# Copying and Pasting {{{
# A binding to enter copy mode. The default binding is <prefix> [, but I
# find this one a bit more convenient. The only awkward part is, to select
# things, we end up hitting <prefix> v to enter copy mode and then v again to
# start selecting.
# NOTE: Scrolling or selecting text with the mouse will also enter copy mode.
unbind [
bind v copy-mode

# By default, mode-keys vi causes / and ? to do searches in copy mode (just like
# in vim). The following bindings make these searches incremental (i.e. matches
# are highlighted as you type, instead of after you submit the query).
bind-key -T copy-mode-vi / command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""
bind-key -T copy-mode-vi ? command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""

# In the "Options" section above, we set mode-keys to enable vi-like navigation
# in copy-mode. Here, we define some vi-like keybindings for selecting and
# copying text while in copy mode. Our binding for copying sends the
# copied text to the system clipboard (which will in turn be sent to zsh's
# register thanks to the plugin zsh-system-clipboard).
#
# NOTE: for the system clipboard integration to work, xclip must be installed.
# (I thought xclip had to be installed for the clipboard to be working, but it
# turns out that xclip is just a CLI for the clipboard of X11, which is the
# system clipboard.)
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel $TMUX_SYSTEM_CLIPBOARD_COMMAND
# An alternate binding for y that copies directly to a tmux's clipboard buffer,
# not to the system clipboard.
# (without sending to the system register).
#bind -T copy-mode-vi y send-keys -X copy-selection

# A binding for pasting the most recently copied text. The default binding
# for this is <prefix> ], but this one feels a bit more convenient to me
# (plus, it pairs well with binding v to enter copy mode and to select text
# once in copy mode, as we did above).
# NOTE: Anything copied to the system clipboard from a program outside
# the terminal will not be available in tmux's clipboard. It will, however,
# appear in zsh's internal register, so we can paste it with zsh (by going
# into command mode and hitting p).
unbind ]
bind b paste-buffer
# Another binding for pasting, but this time with a choice between all of
# tmux's clipboard buffers (which basically function as a history of all text
# that have been copied in tmux).
bind C-b choose-buffer
#}}}
# Mouse Use {{{
# Allow mouse events to be bound by key bindings.
set -g mouse on

# When scrolling with the mouse, reduce the number of scrolled rows per tick
# to 2 (the default is 5, which makes text go by pretty quickly!)
bind -T copy-mode-vi WheelUpPane select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane select-pane \; send-keys -X -N 2 scroll-down

# By default, any text highlighted with the mouse is immediately copied.
# We unbind this and instead provide the following behavior: once text is
# selected in copy mode (using the mouse or otherwise), left clicking with the
# mouse will copy it.
unbind -T copy-mode-vi MouseDragEnd1Pane
bind -T copy-mode-vi MouseDown1Pane select-pane \; send-keys -X copy-pipe-and-cancel $TMUX_SYSTEM_CLIPBOARD_COMMAND
#}}}
#}}}
